// Code generated by goa v3.4.2, DO NOT EDIT.
//
// creatures endpoints
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package creatures

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "creatures" service endpoints.
type Endpoints struct {
	List        goa.Endpoint
	Get         goa.Endpoint
	RandomFacts goa.Endpoint
}

// NewEndpoints wraps the methods of the "creatures" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List:        NewListEndpoint(s),
		Get:         NewGetEndpoint(s),
		RandomFacts: NewRandomFactsEndpoint(s),
	}
}

// Use applies the given middleware to all the "creatures" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Get = m(e.Get)
	e.RandomFacts = m(e.RandomFacts)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "creatures".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx)
	}
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "creatures".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetPayload)
		return s.Get(ctx, p)
	}
}

// NewRandomFactsEndpoint returns an endpoint function that calls the method
// "random-facts" of service "creatures".
func NewRandomFactsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RandomFactsPayload)
		return s.RandomFacts(ctx, p)
	}
}
