// Code generated by goa v3.4.2, DO NOT EDIT.
//
// creatures service
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package creatures

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The creatures service provides you with farm creatures and facts about them.
type Service interface {
	// List implements list.
	List(context.Context) (res *ListResult, err error)
	// Get implements get.
	Get(context.Context, *GetPayload) (res *GetResult, err error)
	// RandomFacts implements random-facts.
	RandomFacts(context.Context, *RandomFactsPayload) (res *RandomFactsResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "creatures"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "get", "random-facts"}

// ListResult is the result type of the creatures service list method.
type ListResult struct {
	// List of creatures
	Creatures []*Creature
}

// GetPayload is the payload type of the creatures service get method.
type GetPayload struct {
	// Name of the creature
	Name string
}

// GetResult is the result type of the creatures service get method.
type GetResult struct {
	// The creature
	Creature *Creature
}

// RandomFactsPayload is the payload type of the creatures service random-facts
// method.
type RandomFactsPayload struct {
	// Name of the creature
	Name string
	// Number of random facts
	N *int
}

// RandomFactsResult is the result type of the creatures service random-facts
// method.
type RandomFactsResult struct {
	// Random facts about the creature
	Facts []string
}

type Creature struct {
	// Name of the creature
	Name string
	// Facts about the creature
	Facts []string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
