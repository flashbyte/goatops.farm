// Code generated by goa v3.4.2, DO NOT EDIT.
//
// goatfacts HTTP server
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package server

import (
	"context"
	"net/http"

	goatfacts "github.com/martinohmann/goatops.farm/gen/goatfacts"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the goatfacts service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	ListFacts           http.Handler
	RandomFacts         http.Handler
	Index               http.Handler
	GenHTTPOpenapi3JSON http.Handler
	Static              http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the goatfacts service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *goatfacts.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
	fileSystemStatic http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	if fileSystemStatic == nil {
		fileSystemStatic = http.Dir(".")
	}
	return &Server{
		Mounts: []*MountPoint{
			{"ListFacts", "GET", "/api/facts"},
			{"RandomFacts", "GET", "/api/facts/random"},
			{"Index", "GET", "/"},
			{"./gen/http/openapi3.json", "GET", "/api/openapi.json"},
			{"./static", "GET", "/static"},
		},
		ListFacts:           NewListFactsHandler(e.ListFacts, mux, decoder, encoder, errhandler, formatter),
		RandomFacts:         NewRandomFactsHandler(e.RandomFacts, mux, decoder, encoder, errhandler, formatter),
		Index:               NewIndexHandler(e.Index, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi3JSON: http.FileServer(fileSystemGenHTTPOpenapi3JSON),
		Static:              http.FileServer(fileSystemStatic),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "goatfacts" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListFacts = m(s.ListFacts)
	s.RandomFacts = m(s.RandomFacts)
	s.Index = m(s.Index)
}

// Mount configures the mux to serve the goatfacts endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListFactsHandler(mux, h.ListFacts)
	MountRandomFactsHandler(mux, h.RandomFacts)
	MountIndexHandler(mux, h.Index)
	MountGenHTTPOpenapi3JSON(mux, goahttp.ReplacePrefix("/api/openapi.json", "/./gen/http/openapi3.json", h.GenHTTPOpenapi3JSON))
	MountStatic(mux, goahttp.ReplacePrefix("/static", "/./static", h.Static))
}

// MountListFactsHandler configures the mux to serve the "goatfacts" service
// "ListFacts" endpoint.
func MountListFactsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/facts", f)
}

// NewListFactsHandler creates a HTTP handler which loads the HTTP request and
// calls the "goatfacts" service "ListFacts" endpoint.
func NewListFactsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListFactsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ListFacts")
		ctx = context.WithValue(ctx, goa.ServiceKey, "goatfacts")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRandomFactsHandler configures the mux to serve the "goatfacts" service
// "RandomFacts" endpoint.
func MountRandomFactsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/facts/random", f)
}

// NewRandomFactsHandler creates a HTTP handler which loads the HTTP request
// and calls the "goatfacts" service "RandomFacts" endpoint.
func NewRandomFactsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRandomFactsRequest(mux, decoder)
		encodeResponse = EncodeRandomFactsResponse(encoder)
		encodeError    = EncodeRandomFactsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "RandomFacts")
		ctx = context.WithValue(ctx, goa.ServiceKey, "goatfacts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIndexHandler configures the mux to serve the "goatfacts" service
// "Index" endpoint.
func MountIndexHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/", f)
}

// NewIndexHandler creates a HTTP handler which loads the HTTP request and
// calls the "goatfacts" service "Index" endpoint.
func NewIndexHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeIndexResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Index")
		ctx = context.WithValue(ctx, goa.ServiceKey, "goatfacts")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/api/openapi.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/api/openapi.json", h.ServeHTTP)
}

// MountStatic configures the mux to serve GET request made to "/static".
func MountStatic(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/static/", h.ServeHTTP)
	mux.Handle("GET", "/static/*path", h.ServeHTTP)
}
