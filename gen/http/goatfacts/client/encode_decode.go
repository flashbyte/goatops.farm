// Code generated by goa v3.4.2, DO NOT EDIT.
//
// goatfacts HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	goatfacts "github.com/martinohmann/goatops.farm/gen/goatfacts"
	goahttp "goa.design/goa/v3/http"
)

// BuildListFactsRequest instantiates a HTTP request object with method and
// path set to call the "goatfacts" service "ListFacts" endpoint
func (c *Client) BuildListFactsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFactsGoatfactsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goatfacts", "ListFacts", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListFactsResponse returns a decoder for responses returned by the
// goatfacts ListFacts endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListFactsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "ListFacts", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goatfacts", "ListFacts", resp.StatusCode, string(body))
		}
	}
}

// BuildRandomFactsRequest instantiates a HTTP request object with method and
// path set to call the "goatfacts" service "RandomFacts" endpoint
func (c *Client) BuildRandomFactsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RandomFactsGoatfactsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goatfacts", "RandomFacts", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRandomFactsRequest returns an encoder for requests sent to the
// goatfacts RandomFacts server.
func EncodeRandomFactsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*goatfacts.RandomFactsPayload)
		if !ok {
			return goahttp.ErrInvalidType("goatfacts", "RandomFacts", "*goatfacts.RandomFactsPayload", v)
		}
		values := req.URL.Query()
		if p.N != nil {
			values.Add("n", fmt.Sprintf("%v", *p.N))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRandomFactsResponse returns a decoder for responses returned by the
// goatfacts RandomFacts endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRandomFactsResponse may return the following errors:
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRandomFactsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "RandomFacts", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body RandomFactsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "RandomFacts", err)
			}
			err = ValidateRandomFactsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("goatfacts", "RandomFacts", err)
			}
			return nil, NewRandomFactsBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goatfacts", "RandomFacts", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "goatfacts" service "Index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexGoatfactsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goatfacts", "Index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeIndexResponse returns a decoder for responses returned by the
// goatfacts Index endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "Index", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goatfacts", "Index", resp.StatusCode, string(body))
		}
	}
}
