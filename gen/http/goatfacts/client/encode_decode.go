// Code generated by goa v3.4.2, DO NOT EDIT.
//
// goatfacts HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goatfacts "github.com/martinohmann/goatops.farm/gen/goatfacts"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetFactRequest instantiates a HTTP request object with method and path
// set to call the "goatfacts" service "get-fact" endpoint
func (c *Client) BuildGetFactRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*goatfacts.GetFactPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("goatfacts", "get-fact", "*goatfacts.GetFactPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetFactGoatfactsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goatfacts", "get-fact", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetFactResponse returns a decoder for responses returned by the
// goatfacts get-fact endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetFactResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeGetFactResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetFactResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "get-fact", err)
			}
			err = ValidateGetFactResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("goatfacts", "get-fact", err)
			}
			res := NewGetFactFactOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetFactNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "get-fact", err)
			}
			err = ValidateGetFactNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("goatfacts", "get-fact", err)
			}
			return nil, NewGetFactNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetFactBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "get-fact", err)
			}
			err = ValidateGetFactBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("goatfacts", "get-fact", err)
			}
			return nil, NewGetFactBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goatfacts", "get-fact", resp.StatusCode, string(body))
		}
	}
}

// BuildListFactsRequest instantiates a HTTP request object with method and
// path set to call the "goatfacts" service "list-facts" endpoint
func (c *Client) BuildListFactsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFactsGoatfactsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goatfacts", "list-facts", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListFactsResponse returns a decoder for responses returned by the
// goatfacts list-facts endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListFactsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListFactsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "list-facts", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateFact(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("goatfacts", "list-facts", err)
			}
			res := NewListFactsFactOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goatfacts", "list-facts", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRandomFactRequest instantiates a HTTP request object with method and
// path set to call the "goatfacts" service "get-random-fact" endpoint
func (c *Client) BuildGetRandomFactRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetRandomFactGoatfactsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("goatfacts", "get-random-fact", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetRandomFactResponse returns a decoder for responses returned by the
// goatfacts get-random-fact endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetRandomFactResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeGetRandomFactResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetRandomFactResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "get-random-fact", err)
			}
			err = ValidateGetRandomFactResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("goatfacts", "get-random-fact", err)
			}
			res := NewGetRandomFactFactOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetRandomFactNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("goatfacts", "get-random-fact", err)
			}
			err = ValidateGetRandomFactNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("goatfacts", "get-random-fact", err)
			}
			return nil, NewGetRandomFactNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("goatfacts", "get-random-fact", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFactToGoatfactsFact builds a value of type *goatfacts.Fact from a
// value of type *Fact.
func unmarshalFactToGoatfactsFact(v *Fact) *goatfacts.Fact {
	res := &goatfacts.Fact{
		ID:   *v.ID,
		Text: *v.Text,
	}

	return res
}
