// Code generated by goa v3.4.2, DO NOT EDIT.
//
// goatfacts HTTP client types
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package client

import (
	"unicode/utf8"

	goatfacts "github.com/martinohmann/goatops.farm/gen/goatfacts"
	goa "goa.design/goa/v3/pkg"
)

// GetFactResponseBody is the type of the "goatfacts" service "get-fact"
// endpoint HTTP response body.
type GetFactResponseBody struct {
	// A unique ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Fact text
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// ListFactsResponseBody is the type of the "goatfacts" service "list-facts"
// endpoint HTTP response body.
type ListFactsResponseBody []*Fact

// GetRandomFactResponseBody is the type of the "goatfacts" service
// "get-random-fact" endpoint HTTP response body.
type GetRandomFactResponseBody struct {
	// A unique ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Fact text
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// GetFactNotFoundResponseBody is the type of the "goatfacts" service
// "get-fact" endpoint HTTP response body for the "NotFound" error.
type GetFactNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetFactBadRequestResponseBody is the type of the "goatfacts" service
// "get-fact" endpoint HTTP response body for the "BadRequest" error.
type GetFactBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetRandomFactNotFoundResponseBody is the type of the "goatfacts" service
// "get-random-fact" endpoint HTTP response body for the "NotFound" error.
type GetRandomFactNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// Fact is used to define fields on response body types.
type Fact struct {
	// A unique ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Fact text
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// NewGetFactFactOK builds a "goatfacts" service "get-fact" endpoint result
// from a HTTP "OK" response.
func NewGetFactFactOK(body *GetFactResponseBody) *goatfacts.Fact {
	v := &goatfacts.Fact{
		ID:   *body.ID,
		Text: *body.Text,
	}

	return v
}

// NewGetFactNotFound builds a goatfacts service get-fact endpoint NotFound
// error.
func NewGetFactNotFound(body *GetFactNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetFactBadRequest builds a goatfacts service get-fact endpoint BadRequest
// error.
func NewGetFactBadRequest(body *GetFactBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListFactsFactOK builds a "goatfacts" service "list-facts" endpoint result
// from a HTTP "OK" response.
func NewListFactsFactOK(body []*Fact) []*goatfacts.Fact {
	v := make([]*goatfacts.Fact, len(body))
	for i, val := range body {
		v[i] = unmarshalFactToGoatfactsFact(val)
	}

	return v
}

// NewGetRandomFactFactOK builds a "goatfacts" service "get-random-fact"
// endpoint result from a HTTP "OK" response.
func NewGetRandomFactFactOK(body *GetRandomFactResponseBody) *goatfacts.Fact {
	v := &goatfacts.Fact{
		ID:   *body.ID,
		Text: *body.Text,
	}

	return v
}

// NewGetRandomFactNotFound builds a goatfacts service get-random-fact endpoint
// NotFound error.
func NewGetRandomFactNotFound(body *GetRandomFactNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetFactResponseBody runs the validations defined on
// Get-FactResponseBody
func ValidateGetFactResponseBody(body *GetFactResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 255, false))
		}
	}
	return
}

// ValidateGetRandomFactResponseBody runs the validations defined on
// Get-Random-FactResponseBody
func ValidateGetRandomFactResponseBody(body *GetRandomFactResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 255, false))
		}
	}
	return
}

// ValidateGetFactNotFoundResponseBody runs the validations defined on
// get-fact_NotFound_response_body
func ValidateGetFactNotFoundResponseBody(body *GetFactNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetFactBadRequestResponseBody runs the validations defined on
// get-fact_BadRequest_response_body
func ValidateGetFactBadRequestResponseBody(body *GetFactBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetRandomFactNotFoundResponseBody runs the validations defined on
// get-random-fact_NotFound_response_body
func ValidateGetRandomFactNotFoundResponseBody(body *GetRandomFactNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateFact runs the validations defined on Fact
func ValidateFact(body *Fact) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 255, false))
		}
	}
	return
}
