// Code generated by goa v3.4.2, DO NOT EDIT.
//
// creatures HTTP client types
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package client

import (
	creatures "github.com/martinohmann/goatops.farm/gen/creatures"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "creatures" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// List of creatures
	Creatures []*CreatureResponseBody `form:"creatures,omitempty" json:"creatures,omitempty" xml:"creatures,omitempty"`
}

// GetResponseBody is the type of the "creatures" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// The creature
	Creature *CreatureResponseBody `form:"creature,omitempty" json:"creature,omitempty" xml:"creature,omitempty"`
}

// RandomFactsResponseBody is the type of the "creatures" service
// "random-facts" endpoint HTTP response body.
type RandomFactsResponseBody struct {
	// Random facts about the creature
	Facts []string `form:"facts,omitempty" json:"facts,omitempty" xml:"facts,omitempty"`
}

// GetNotFoundResponseBody is the type of the "creatures" service "get"
// endpoint HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RandomFactsBadRequestResponseBody is the type of the "creatures" service
// "random-facts" endpoint HTTP response body for the "bad_request" error.
type RandomFactsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RandomFactsNotFoundResponseBody is the type of the "creatures" service
// "random-facts" endpoint HTTP response body for the "not_found" error.
type RandomFactsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreatureResponseBody is used to define fields on response body types.
type CreatureResponseBody struct {
	// Name of the creature
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Facts about the creature
	Facts []string `form:"facts,omitempty" json:"facts,omitempty" xml:"facts,omitempty"`
}

// NewListResultOK builds a "creatures" service "list" endpoint result from a
// HTTP "OK" response.
func NewListResultOK(body *ListResponseBody) *creatures.ListResult {
	v := &creatures.ListResult{}
	v.Creatures = make([]*creatures.Creature, len(body.Creatures))
	for i, val := range body.Creatures {
		v.Creatures[i] = unmarshalCreatureResponseBodyToCreaturesCreature(val)
	}

	return v
}

// NewGetResultOK builds a "creatures" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetResultOK(body *GetResponseBody) *creatures.GetResult {
	v := &creatures.GetResult{}
	v.Creature = unmarshalCreatureResponseBodyToCreaturesCreature(body.Creature)

	return v
}

// NewGetNotFound builds a creatures service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRandomFactsResultOK builds a "creatures" service "random-facts" endpoint
// result from a HTTP "OK" response.
func NewRandomFactsResultOK(body *RandomFactsResponseBody) *creatures.RandomFactsResult {
	v := &creatures.RandomFactsResult{}
	v.Facts = make([]string, len(body.Facts))
	for i, val := range body.Facts {
		v.Facts[i] = val
	}

	return v
}

// NewRandomFactsBadRequest builds a creatures service random-facts endpoint
// bad_request error.
func NewRandomFactsBadRequest(body *RandomFactsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRandomFactsNotFound builds a creatures service random-facts endpoint
// not_found error.
func NewRandomFactsNotFound(body *RandomFactsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Creatures == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("creatures", "body"))
	}
	for _, e := range body.Creatures {
		if e != nil {
			if err2 := ValidateCreatureResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Creature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("creature", "body"))
	}
	if body.Creature != nil {
		if err2 := ValidateCreatureResponseBody(body.Creature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRandomFactsResponseBody runs the validations defined on
// Random-FactsResponseBody
func ValidateRandomFactsResponseBody(body *RandomFactsResponseBody) (err error) {
	if body.Facts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("facts", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_not_found_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRandomFactsBadRequestResponseBody runs the validations defined on
// random-facts_bad_request_response_body
func ValidateRandomFactsBadRequestResponseBody(body *RandomFactsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRandomFactsNotFoundResponseBody runs the validations defined on
// random-facts_not_found_response_body
func ValidateRandomFactsNotFoundResponseBody(body *RandomFactsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreatureResponseBody runs the validations defined on
// CreatureResponseBody
func ValidateCreatureResponseBody(body *CreatureResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Facts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("facts", "body"))
	}
	return
}
