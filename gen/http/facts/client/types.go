// Code generated by goa v3.4.2, DO NOT EDIT.
//
// facts HTTP client types
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package client

import (
	facts "github.com/martinohmann/goatops.farm/gen/facts"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "facts" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// List of facts
	Facts []string `form:"facts,omitempty" json:"facts,omitempty" xml:"facts,omitempty"`
}

// ListRandomResponseBody is the type of the "facts" service "list-random"
// endpoint HTTP response body.
type ListRandomResponseBody struct {
	// List of random facts
	Facts []string `form:"facts,omitempty" json:"facts,omitempty" xml:"facts,omitempty"`
}

// ListRandomBadRequestResponseBody is the type of the "facts" service
// "list-random" endpoint HTTP response body for the "bad_request" error.
type ListRandomBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewListResultOK builds a "facts" service "list" endpoint result from a HTTP
// "OK" response.
func NewListResultOK(body *ListResponseBody) *facts.ListResult {
	v := &facts.ListResult{}
	v.Facts = make([]string, len(body.Facts))
	for i, val := range body.Facts {
		v.Facts[i] = val
	}

	return v
}

// NewListRandomResultOK builds a "facts" service "list-random" endpoint result
// from a HTTP "OK" response.
func NewListRandomResultOK(body *ListRandomResponseBody) *facts.ListRandomResult {
	v := &facts.ListRandomResult{}
	v.Facts = make([]string, len(body.Facts))
	for i, val := range body.Facts {
		v.Facts[i] = val
	}

	return v
}

// NewListRandomBadRequest builds a facts service list-random endpoint
// bad_request error.
func NewListRandomBadRequest(body *ListRandomBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Facts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("facts", "body"))
	}
	return
}

// ValidateListRandomResponseBody runs the validations defined on
// List-RandomResponseBody
func ValidateListRandomResponseBody(body *ListRandomResponseBody) (err error) {
	if body.Facts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("facts", "body"))
	}
	return
}

// ValidateListRandomBadRequestResponseBody runs the validations defined on
// list-random_bad_request_response_body
func ValidateListRandomBadRequestResponseBody(body *ListRandomBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
