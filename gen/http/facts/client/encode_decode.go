// Code generated by goa v3.4.2, DO NOT EDIT.
//
// facts HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	facts "github.com/martinohmann/goatops.farm/gen/facts"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "facts" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFactsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("facts", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the facts
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("facts", "list", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("facts", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildListRandomRequest instantiates a HTTP request object with method and
// path set to call the "facts" service "list-random" endpoint
func (c *Client) BuildListRandomRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListRandomFactsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("facts", "list-random", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRandomRequest returns an encoder for requests sent to the facts
// list-random server.
func EncodeListRandomRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*facts.ListRandomPayload)
		if !ok {
			return goahttp.ErrInvalidType("facts", "list-random", "*facts.ListRandomPayload", v)
		}
		values := req.URL.Query()
		if p.N != nil {
			values.Add("n", fmt.Sprintf("%v", *p.N))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListRandomResponse returns a decoder for responses returned by the
// facts list-random endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListRandomResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListRandomResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("facts", "list-random", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body ListRandomBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("facts", "list-random", err)
			}
			err = ValidateListRandomBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("facts", "list-random", err)
			}
			return nil, NewListRandomBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("facts", "list-random", resp.StatusCode, string(body))
		}
	}
}
