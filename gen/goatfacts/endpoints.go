// Code generated by goa v3.4.2, DO NOT EDIT.
//
// goatfacts endpoints
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package goatfacts

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "goatfacts" service endpoints.
type Endpoints struct {
	GetFact       goa.Endpoint
	ListFacts     goa.Endpoint
	GetRandomFact goa.Endpoint
}

// NewEndpoints wraps the methods of the "goatfacts" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetFact:       NewGetFactEndpoint(s),
		ListFacts:     NewListFactsEndpoint(s),
		GetRandomFact: NewGetRandomFactEndpoint(s),
	}
}

// Use applies the given middleware to all the "goatfacts" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetFact = m(e.GetFact)
	e.ListFacts = m(e.ListFacts)
	e.GetRandomFact = m(e.GetRandomFact)
}

// NewGetFactEndpoint returns an endpoint function that calls the method
// "get-fact" of service "goatfacts".
func NewGetFactEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetFactPayload)
		return s.GetFact(ctx, p)
	}
}

// NewListFactsEndpoint returns an endpoint function that calls the method
// "list-facts" of service "goatfacts".
func NewListFactsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListFacts(ctx)
	}
}

// NewGetRandomFactEndpoint returns an endpoint function that calls the method
// "get-random-fact" of service "goatfacts".
func NewGetRandomFactEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetRandomFact(ctx)
	}
}
